{"name":"OpenWIS GitHub Development Methodology","tagline":"An initial guide to the GitHub workflow for the OpenWIS Association","body":"## Purpose\r\n\r\nThis document proposes the GitHub Branching Strategy and ‘workflow’ for use in OpenWIS development. \r\n\r\nThe document is written in a chronological order from repository creation and should mirror how the branches and forks interact through the release cycle.\r\n\r\n***\r\n## Initial Setup\r\n\r\n### Repository Creation\r\n\r\nThe OpenWIS repository has been created by the Met Office, which is acting as the GitHub administrator for the partners . The repository can be accessed at https://github.com/OpenWIS/openwis and requests for access can be made via dominic.woollatt@metoffice.gov.uk or cmteam@metoffice.gov.uk.  \r\n\r\nWhen the new (original) repository was created it had one basic empty branch, master.  \r\n\r\n![openwis_github_1](https://f.cloud.github.com/assets/5089179/2512857/778b36a8-b42a-11e3-84e0-2430be17127b.png)\r\n\r\n\r\n###Initial Population\r\n\r\nThe first commit of code to this repository was **openwis-3.11** released in July 2013. This code was then ‘tagged’ to create a known baseline.\r\n\r\n![openwis_github_2](https://f.cloud.github.com/assets/5089179/2512853/777bfe18-b42a-11e3-827a-2962ed1ba9da.png) \r\n\r\nThe master branch should represent the _production or production-ready code_, and therefore should not contain **any** development code. A new branch “develop” has been created for this very reason.\r\n\r\n![openwis_github_3](https://f.cloud.github.com/assets/5089179/2512855/77803eb0-b42a-11e3-9c29-6372f709824c.png) \r\n\r\nWhen openwis-3.12 was committed in February 2014, the code was committed to the develop branch, merged to the master branch and tagged (again to provide a baseline)\r\n\r\n![openwis_github_4](https://f.cloud.github.com/assets/5089179/2512851/777ac8f4-b42a-11e3-94ef-ad9171a63cd2.png) \r\n\r\n***\r\n##Development Phase\r\nThe initial population was completed in the single repository. The repository was _cloned_ to a local workstation and then new commits were made and the changes _pushed _back to the GitHub repository.\r\n\r\nHowever there will be multiple developers from the association working on OpenWIS at the same time: we need a means of isolating the development so as to reduce conflicts. Rather than have the Met Office designate read/write permissions to the repository, we will allow partners to ‘fork’ the repository using GitHub’s Fork and Pull Model\r\n\r\nFrom https://help.github.com/articles/using-pull-requests/ \r\n\r\n**The _Fork & Pull Model_ lets anyone fork an existing repository and push changes to their personal fork without requiring access to be granted to the source repository. The changes must then be pulled into the source repository by the project maintainer – a named user from each partner.**\r\n\r\n**This model reduces the amount of friction for new contributors and is popular with open source projects because it allows people to work independently without upfront coordination.**\r\n\r\nForking will allow developers to take exact ‘mirrors’ of the OpenWIS repository and make changes without affecting the original.\r\n\r\n###Forking the Repository\r\n\r\nLog in to GitHub and browse to the repository - https://github.com/OpenWIS/openwis. You will see a ‘Fork’ button in the top left corner, click on **Fork**\r\n\r\n![openwis_github_5](https://f.cloud.github.com/assets/5089179/2512850/77793a84-b42a-11e3-8782-3c650ece5b85.png) \r\n\r\nYou will be given an option of where to fork this repository, select your GitHub username. After a short delay you will be presented with your forked repository. You now have full read/write control over this repository.\r\n\r\n###Making Changes in the Fork\r\n\r\nWhilst you can make as many forks as required, there are two real options :\r\n\r\n* one fork for each user, or; \r\n* one fork for each partner\r\n\r\nBoth have benefits and drawbacks, but both methods will use the below methodology.\r\n\r\nIf you decide to have one fork per user, you will need to do a lot more merging between the forks to ensure everyone’s changes end up in one repository that can be merged back to the original. If you decide to create one fork per partner, then there is less fork merging but you may have to administer access rights to ensure all required users have access to the fork.\r\n\r\nIt is probably easier to have **one fork per partner.**\r\n\r\nThe simplest  way of working is to change code and commit directly to the develop branch. However for a number of reasons, this is not recommended.  To enable you to isolate code for individual bug fixes or new features you should create a new feature branch off of develop for each bug or feature you want to implement. This is achieved by using the _git branch_ command (or similar if you are using a Graphical User Interface or Integrated Development Environment).\r\n\r\n![openwis_github_6](https://f.cloud.github.com/assets/5089179/2512856/7782e052-b42a-11e3-9c3d-67238162851a.png) \r\n\r\nThis allows code to be committed to individual branches specifically created for a unit of work and allows it to be merged back to the develop branch without pulling in any other units of work. \r\n\r\nIf you are working with the one fork per partner model, then the individual feature/bug branches also ensure that developers’ code is isolated from each other’s and as a result one developer’s broken, erroneous, trial or mid-development code does not affect that of other developers working on different feature branches. \r\n\r\n![openwis_github_7](https://f.cloud.github.com/assets/5089179/2512854/777f8326-b42a-11e3-8a07-452dd733c5a7.png)\r\n\r\nRemember all of these branches are in your fork, and are not affecting the original.\r\n \r\n###Merging Changes between the Fork and the Original\r\n\r\nWhen you have made your changes in the fork, you need to merge your fork back to the original. GitHub has detailed information on how to merge your changes in the fork back to the original repository - https://help.github.com/articles/using-pull-requests.  When you create a pull request all users will be added as watchers so that they can collaborate and discuss the changes.\r\n\r\n\r\n### _Please ensure that you do not merge to the master branch in the original_\r\n\r\n\r\n## Permissions\r\n\r\nCurrently, all members have write access meaning they can fork, commit to a fork and merge back to the original as well as commit directly to the original.\r\n\r\nThe partners need to agree if this model is suitable or if a workflow such as the Integration-Manager-Workflow should be applied. This would allow all developers to fork and commit to their forks, **but only allow named integration managers to merge pull requests** and keep the original repository clear of rogue commits.\r\n\r\nhttps://help.github.com/articles/what-are-the-different-access-permissions","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}