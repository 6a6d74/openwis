{"name":"Openwis","tagline":"","body":"Contents\r\n\r\nContents\t2\r\nPurpose\t2\r\nInitial Setup\t3\r\nRepository Creation\t3\r\nInitial Population\t3\r\nDevelopment Phase\t4\r\nForking the Repository\t4\r\nMaking Changes in the Fork\t4\r\nMerging Changes between the Fork and the Original\t6\r\nPermissions\t6\r\n\r\nPurpose\r\n\r\nThis document proposes the GitHub Branching Strategy and ‘workflow’ for use in OpenWIS development. \r\n\r\nThe document is written in a chronological order from repository creation and should mirror how the branches and forks interact through the release cycle.\r\n \r\nInitial Setup\r\nRepository Creation\r\n\r\nThe OpenWIS repository has been created by the Met Office, who are currently acting as the GitHub administrators. The repository can be accessed at https://github.com/OpenWIS/openwis and requests for access can be made via dominic.woollatt@metoffice.gov.uk or cmteam@metoffice.gov.uk.  \r\n\r\nWhen a new repository was created it had one basic empty branch; master.  \r\n\r\n  \r\n\r\nInitial Population\r\n\r\nThe first commit of code to this repository was openwis-3.11 in July 2013. This code was then ‘tagged’ to create a known baseline.  \r\n\r\n \r\n\r\nThe master branch is supposed to represent the production or production-ready code, and therefore should not contain any development code. A new branch “develop” has been created for this very reason.\r\n\r\n \r\n\r\nWhen openwis-3.12 was committed, the code was committed to the develop branch, merged to the master branch and tagged (again to provide a baseline)\r\n\r\n \r\n\r\nDevelopment Phase\r\nThe initial population was completed in the single repository. The repository was cloned to a local workstation and then new commits were made and the changes pushed back to the GitHub repository.\r\n\r\nHowever because of there will be multiple developers working on OpenWIS, we need a means of isolating the development so to reduce conflicts. Rather than have the Met Office designate read\\write permissions to the repository, we will allow partners to ‘fork’ the repository using GitHub’s Fork and Pull Model\r\n\r\nFrom https://help.github.com/articles/using-pull-requests/ \r\n\r\nThe Fork & Pull Model lets anyone fork an existing repository and push changes to their personal fork without requiring access be granted to the source repository. The changes must then be pulled into the source repository by the project maintainer. This model reduces the amount of friction for new contributors and is popular with open source projects because it allows people to work independently without upfront coordination.\r\n\r\nForking will allow developers to take exact ‘mirrors’ of the OpenWIS repository and make changes without affecting the original.\r\nForking the Repository\r\n\r\nLog in to GitHub and browse to the repository - https://github.com/OpenWIS/openwis. You will see a ‘Fork’ button in the top left corner, click on Fork\r\n\r\n \r\n\r\nYou will be given an option of where to fork this repository, select your GitHub username. After a short delay you will be presented with your forked repository. You now have full read/write control over this repository.\r\nMaking Changes in the Fork\r\n\r\nWhilst you can make as many forks as required, there are two real options – one fork for each user or one fork for each partner. Both have benefits and drawbacks, but both methods will use the below methodology.\r\n\r\nIf you decide to have one fork per user, you will need to do a lot more merging between the forks to ensure everyone’s changes end up in one repository that can be merged back to the original. If you decide to create one fork per partner, then there is less fork merging but you may have to administer access right to ensure all required users have access to the fork.\r\n\r\nIt is probably easier to have one fork per partner.\r\n\r\n \r\nThe most simple way of working would be to change code and commit directly to the develop branch. However for a number of reasons, this is not recommended.  To enable you to isolate code for individual bug fixes or new features you should create a new feature branch off of develop for each bug or feature you wish to implement. This is achieved by using the git branch command (or similar if you are using a Graphical User Interface or Integrated Development Environment).\r\n\r\n \r\n\r\nThis allows code can be committed to individual branches specifically created for a unit of work. This allows that unit of work to be merged back to the develop branch without pulling in any other units of work. \r\n\r\nIf you are working with the one fork per partner model, then the branches also ensure that developers code is isolated from each other’s meaning that one developer’s broken, erroneous, trial or mid-development code is not affecting any other developers. \r\n\r\n \r\n\r\nRemember all of these branches are in your fork, and are not affecting the original.\r\n \r\nMerging Changes between the Fork and the Original\r\n\r\nWhen you have made your changes in the fork, you need to merge your fork back to the original. GitHub has detailed information on how to merge your changes in the fork back to the original repository - https://help.github.com/articles/using-pull-requests.  When you create a pull request all users will be added as watchers so that they can collaborate and discuss the changes.\r\n\r\nPlease ensure that you do not merge to the master branch in the original.\r\nPermissions\r\n\r\nCurrently, all members have write access meaning they can fork, commit to a cork and merge back to the original as well as commit directly to the original. The partners need to agree if this model is suitable or if a workflow such as the Integration-Manager-Workflow should be applied. This would allow all developers to fork and commit to their forks, but allow only named integration managers to merge pull requests and keep the original repository clear of rouge commits.\r\n\r\nhttps://help.github.com/articles/what-are-the-different-access-permissions \r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}